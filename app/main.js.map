{"version":3,"sources":["webpack://graph-lab/./js/modules/bezie.js","webpack://graph-lab/./js/modules/brezencheim.js","webpack://graph-lab/./js/modules/circle.js","webpack://graph-lab/./js/modules/cirus.js","webpack://graph-lab/./js/modules/diff.js","webpack://graph-lab/./js/modules/midpoint.js","webpack://graph-lab/./js/modules/notInt.js","webpack://graph-lab/./js/modules/sazerland.js","webpack://graph-lab/webpack/bootstrap","webpack://graph-lab/webpack/runtime/define property getters","webpack://graph-lab/webpack/runtime/hasOwnProperty shorthand","webpack://graph-lab/webpack/runtime/make namespace object","webpack://graph-lab/./js/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;AC7DrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACzB3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,iEAAe,MAAM,E;;;;;;;;;;;;;;AC9CrB;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AChCtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;AC/CxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AC3CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,cAAc;;AAEd;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;UClEzB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;ACNgD;AACZ;AACE;AACF;AACM;AACE;AACN;AACF;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAiE,GAAG,MAAM,EAAE;AAC5E,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,wDAAM;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAW;AAC/B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAM;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAM;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAK;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uDAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC","file":"main.js","sourcesContent":["const bezie = (callstack) => {\r\n    const arr = [];\r\n\r\n    const Bezie2Point = () => {\r\n        let t = 0;\r\n        let dt = 1 / Math.abs(Math.abs(callstack[0][0]) - Math.abs(callstack[1][0]));\r\n        while (t < 1) {\r\n            arr.push([\r\n                (1 - t) * callstack[0][0] + t * callstack[1][0],\r\n                (1 - t) * callstack[0][1] + t * callstack[1][1],\r\n            ]);\r\n            t += dt;\r\n        }\r\n    };\r\n\r\n    const Bezie3Point = () => {\r\n        let t = 0;\r\n        let dt = 1 / Math.abs(Math.abs(callstack[0][0]) - Math.abs(callstack[2][0]));\r\n        dt/=50;\r\n        while (t < 1) {\r\n            arr.push([\r\n                (1 - t) * (1 - t) * callstack[0][0] + 2 * (1 - t) * t * callstack[1][0] + t * t * callstack[2][0],\r\n                (1 - t) * (1 - t) * callstack[0][1] + 2 * (1 - t) * t * callstack[1][1] + t * t * callstack[2][1],\r\n            ]);\r\n            t += dt;\r\n        }\r\n    };\r\n\r\n    const Bezie4Point = () => {\r\n        let t = 0;\r\n        let dt = 1 / Math.abs(Math.abs(callstack[0][0]) - Math.abs(callstack[3][0]));\r\n        dt /=50;\r\n        while (t < 1) {\r\n            arr.push([\r\n                (1 - t) * (1 - t) * (1 - t) * callstack[0][0] +\r\n                    3 * (1 - t) * (1 - t) * t * callstack[1][0] +\r\n                    3 * (1 - t) * t * t * callstack[2][0] +\r\n                    t * t * t * callstack[3][0],\r\n                (1 - t) * (1 - t) * (1 - t) * callstack[0][1] +\r\n                    3 * (1 - t) * (1 - t) * t * callstack[1][1] +\r\n                    3 * (1 - t) * t * t * callstack[2][1] +\r\n                    t * t * t * callstack[3][1],\r\n            ]);\r\n            t += dt;\r\n        }\r\n    };\r\n\r\n    switch (callstack.length) {\r\n        case 2:\r\n            Bezie2Point();\r\n            break;\r\n        case 3:\r\n            Bezie3Point();\r\n            break;\r\n        case 4:\r\n            Bezie4Point();\r\n            break;\r\n    }   \r\n    return arr;\r\n};\r\n\r\nexport default bezie;\r\n","const brezencheim = ([[x1, y1], [x2, y2]]) => {\r\n    const arr = [];\r\n\r\n    const deltaX = Math.abs(x2 - x1);\r\n    const deltaY = Math.abs(y2 - y1);\r\n    const signX = x1 < x2 ? 1 : -1;\r\n    const signY = y1 < y2 ? 1 : -1;\r\n    let error = deltaX - deltaY;\r\n    arr.push([x2, y2]);\r\n    while (x1 != x2 || y1 != y2) {\r\n        arr.push([x1, y1]);\r\n        let error2 = error * 2;\r\n        if (error2 > -deltaY) {\r\n            error -= deltaY;\r\n            x1 += signX;\r\n        }\r\n        if (error2 < deltaX) {\r\n            error += deltaX;\r\n            y1 += signY;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\nexport default brezencheim;\r\n","const circle = ([[x, y], [xr, yr]]) => {\r\n    let r = Math.sqrt((xr - x) ** 2 + (yr - y) ** 2);\r\n    let x1,\r\n        y1,\r\n        yk = 0;\r\n    let sigma, delta, f;\r\n\r\n    let arr = [];\r\n\r\n    x1 = 0;\r\n    y1 = r;\r\n    delta = 2 * (1 - r);\r\n\r\n    do {\r\n        arr.push([x + x1, y + y1]);\r\n        arr.push([x - x1, y + y1]);\r\n        arr.push([x + x1, y - y1]);\r\n        arr.push([x - x1, y - y1]);\r\n\r\n        f = 0;\r\n        if (y1 < yk) break;\r\n        if (delta < 0) {\r\n            sigma = 2 * (delta + y1) - 1;\r\n            if (sigma <= 0) {\r\n                x1++;\r\n                delta += 2 * x1 + 1;\r\n                f = 1;\r\n            }\r\n        } else if (delta > 0) {\r\n            sigma = 2 * (delta - x1) - 1;\r\n            if (sigma > 0) {\r\n                y1--;\r\n                delta += 1 - 2 * y1;\r\n                f = 1;\r\n            }\r\n        }\r\n        if (!f) {\r\n            x1++;\r\n            y1--;\r\n            delta += 2 * (x1 - y1 - 1);\r\n        }\r\n    } while (1);\r\n\r\n    return arr;\r\n};\r\n\r\nexport default circle;","const cirus = ([[x1, y1], [x2, y2]]) => {\r\n    console.log(x1, y1, x2, y2);\r\n    let coordinatesPolygon = [\r\n        { x: 333, y: 200 },\r\n        { x: 333, y: 400 },\r\n        { x: 666, y: 400 },\r\n        { x: 666, y: 200 },\r\n    ];\r\n    let k = coordinatesPolygon.length;\r\n    let d = [x2 - x1, y2 - y1];\r\n    let f = coordinatesPolygon;\r\n    let px, py, px1, py1;\r\n    let normals = [];\r\n    let w;\r\n    let n = coordinatesPolygon.length;\r\n    let tl = 0;\r\n    let tu = 1;\r\n    let Ddotn, Wdotn, t;\r\n\r\n    const dotProduct = ([tx1, ty1], [tx2, ty2]) => {\r\n        return tx1 * tx2 + ty1 * ty2;\r\n    };\r\n\r\n    console.log(coordinatesPolygon);\r\n    //get normals\r\n    for (let i = 0; i < n - 1; i++) {\r\n        normals.push([\r\n            coordinatesPolygon[i + 1].y - coordinatesPolygon[i].y,\r\n            coordinatesPolygon[i].x - coordinatesPolygon[i + 1].x,\r\n        ]);\r\n    }\r\n\r\n    normals.push([\r\n        coordinatesPolygon[0].y - coordinatesPolygon[n - 1].y,\r\n        coordinatesPolygon[n - 1].x - coordinatesPolygon[0].x,\r\n    ]);\r\n\r\n    console.log(normals);\r\n\r\n    for (let i = 0; i < k; i++) {\r\n        w = [x1 - f[i].x, y1 - f[i].y];\r\n\r\n        Ddotn = dotProduct(d, normals[i]);\r\n        Wdotn = dotProduct(w, normals[i]);\r\n\r\n        console.log(\"Ddotn: \" + Ddotn);\r\n        console.log(\"Wdotn \" + Wdotn);\r\n\r\n        if (Ddotn !== 0) {\r\n            t = (-1 * Wdotn) / Ddotn;\r\n            console.log(\"t: \" + t);\r\n\r\n            if (Ddotn > 0) {\r\n                if (t > 1) {\r\n                    return;\r\n                } else {\r\n                    tl = Math.max(t, tl);\r\n                }\r\n            } else {\r\n                if (t < 0) {\r\n                    return;\r\n                } else {\r\n                    tu = Math.min(t, tu);\r\n                }\r\n            }\r\n        } else {\r\n            if (Wdotn < 0) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (tl <= tu) {\r\n        px = x1 + (x2 - x1) * tl;\r\n        py = y1 + (y2 - y1) * tl;\r\n        px1 = x1 + (x2 - x1) * tu;\r\n        py1 = y1 + (y2 - y1) * tu;\r\n    }\r\n\r\n    console.log(px, py, px1, py1);\r\n    return [\r\n        [px, py],\r\n        [px1, py1],\r\n    ];\r\n};\r\n\r\nexport default cirus;\r\n\r\n// const egesPoints = () => {\r\n//     return [\r\n//         [333, 200],\r\n//         [333, 400],\r\n//         [666, 400],\r\n//         [666, 200],\r\n//     ];\r\n// };\r\n\r\n// const getNormal = ([x1, y1], [x2, y2]) => {\r\n//     return [y2 - y1, x1 - x2];\r\n// };\r\n\r\n// const scalar = ([x1, y1], [x2, y2]) => {\r\n//     return x1 * y2 - y1 * x2;\r\n// };\r\n\r\n// let dir = seg.Direction;\r\n// let tA = 0.0;\r\n// let tB = 1.0;\r\n// egesPoints().foreach((edge) => {\r\n//     switch (Math.sign(edge.Normal.ScalarMul(dir))) {\r\n//         case -1: {\r\n//             let t = seg.IntersectionParameter(edge);\r\n//             if (t > tA) {\r\n//                 tA = t;\r\n//             }\r\n//             break;\r\n//         }\r\n//         case +1: {\r\n//             let t = seg.IntersectionParameter(edge);\r\n//             if (t < tB) {\r\n//                 tB = t;\r\n//             }\r\n//             break;\r\n//         }\r\n//         case 0: {\r\n//             if (!edge.OnLeft(seg.A)) {\r\n//                 return;\r\n//             }\r\n//             break;\r\n//         }\r\n//     }\r\n// });\r\n// if (tA > tB) {\r\n//     return;\r\n// }\r\n// seg = seg.Morph(tA, tB);\r\n\r\n// LineWithIntCords.Draw(\r\n//     g,\r\n//     new Point(Math.Round(seg.A.X), Math.Round(seg.A.Y)),\r\n//     new Point(Math.Round(seg.B.X), Math.Round(seg.B.Y))\r\n// );\r\n//     return [];\r\n// };\r\n\r\n// export default cirus;\r\n","const differ = ([[x1, y1], [x2, y2]]) => {\r\n    const arr = [];\r\n    x1 = Math.round(x1);\r\n    x2 = Math.round(x2);\r\n    y1 = Math.round(y1);\r\n    y2 = Math.round(y2);\r\n\r\n    const deltaX = Math.abs(x1 - x2);\r\n    const deltaY = Math.abs(y1 - y2);\r\n    let length = Math.max(deltaX, deltaY);\r\n\r\n    arr.push([x1, y1]);\r\n    if (length == 0) return;\r\n\r\n    let dX = (x2 - x1) / length;\r\n\tlet dY = (y2 - y1) / length;\r\n\r\n    let x = x1;\r\n\tlet y = y1;\r\n \r\n    length++;\r\n\r\n    while (length--)\r\n\t{\r\n\t\tx += dX;\r\n\t\ty += dY;\r\n\t\tarr.push([Math.round(x), Math.round(y)]);\r\n\t}\r\n\r\n    return arr;\r\n};\r\n\r\nexport default differ;\r\n","const midpoint = ([[x1, y1], [x2, y2]], array) => {\r\n    const getCode = (x, y) => {\r\n        let result = 0;\r\n        if (x < 333) result += 1;\r\n        if (x > 666) result += 2;\r\n        if (y < 200) result += 8;\r\n        if (y > 400) result += 4;\r\n        return result;\r\n    };\r\n\r\n    const isInside = (x, y) => {\r\n        return x >= 333 && x <= 666 && y >= 200 && y <= 400;\r\n    };\r\n\r\n    const arr = array || [];\r\n    if (Math.abs(x1 - x2) <= 1 && Math.abs(y1 - y2) <= 1) return arr;\r\n\r\n    if (isInside(x1, y1) && isInside(x2, y2)) {\r\n        arr.push([\r\n            [x1, y1],\r\n            [x2, y2],\r\n        ]);\r\n        return arr;\r\n    }\r\n\r\n    let code1 = getCode(x1, y1);\r\n    let code2 = getCode(x2, y2);\r\n    if ((code1 & code2) != 0) return arr;\r\n\r\n    midpoint(\r\n        [\r\n            [x1, y1],\r\n            [(x1 + x2) / 2, (y1 + y2) / 2],\r\n        ],\r\n        arr\r\n    );\r\n    midpoint(\r\n        [\r\n            [(x1 + x2) / 2, (y1 + y2) / 2],\r\n            [x2, y2],\r\n        ],\r\n        arr\r\n    );\r\n\r\n    return arr;\r\n};\r\n\r\nexport default midpoint;\r\n","const notint = ([[x1, y1], [x2, y2]]) => {\r\n    const arr = [];\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n    let a = Math.round(x2 - x1);\r\n    let b = Math.round(y2 - y1);\r\n    let x_mnoj = 1,\r\n        y_mnoj = 1;\r\n    if (a < 0) {\r\n        a = -a;\r\n        x_mnoj = -1;\r\n    }\r\n    if (b < 0) {\r\n        b = -b;\r\n        y_mnoj = -1;\r\n    }\r\n    let c = 1000;\r\n    let dh = c / Math.abs(x2 - x1);\r\n    //  let h = dh*(1-x1);\r\n    let h = 0;\r\n    let dv = c / Math.abs(y2 - y1);\r\n    // let v = dv * (1 - y1);\r\n    let v = 0;\r\n    while (h < c && v < c) {\r\n        arr.push([x * x_mnoj + Math.round(x1), y * y_mnoj + Math.round(y1)]);\r\n        if (h < v) {\r\n            x++;\r\n            h += dh;\r\n        } else if (h > v) {\r\n            y++;\r\n            v += dv;\r\n        } else {\r\n            arr.push([x * x_mnoj + Math.round(x1),(y + 1) * y_mnoj + Math.round(y1)])\r\n            x++;\r\n            y++;\r\n            h += dh;\r\n            v += dv;\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nexport default notint;\r\n","const sazerland = ([[x1, y1], [x2, y2]]) => {\r\n    const getCode = (x, y) => {\r\n        let result = 0;\r\n        if (x < 333) result += 1;\r\n        if (x > 666) result += 2;\r\n        if (y < 200) result += 8;\r\n        if (y > 400) result += 4;\r\n        return result;\r\n    };\r\n\r\n    const arr = [];\r\n\r\n    let code;\r\n    let code1 = getCode(x1, y1);\r\n    let code2 = getCode(x2, y2);\r\n\r\n    const LEFT = 1,\r\n        RIGHT = 2,\r\n        BOT = 4,\r\n        TOP = 8;\r\n\r\n    let p = {};\r\n    let p1 = { X: x1, Y: y1 };\r\n    let p2 = { X: x2, Y: y2 };\r\n\r\n    while (code1 != 0 || code2 != 0) {\r\n        if ((code1 & code2) != 0) return;\r\n\r\n        if (code1 != 0) {\r\n            code = code1;\r\n            p = {...p1};\r\n        } else {\r\n            code = code2;\r\n            p = {...p2};\r\n        }\r\n\r\n        if ((code & LEFT) != 0) {\r\n            p.Y += ((p1.Y - p2.Y) * (333 - p.X)) / (p1.X - p2.X);\r\n            p.X = 333;\r\n        } else if ((code & RIGHT) != 0) {\r\n            p.Y += ((p1.Y - p2.Y) * (666 - p.X)) / (p1.X - p2.X);\r\n            p.X = 666;\r\n        } else if ((code & BOT) != 0) {\r\n            p.X += ((p1.X - p2.X) * (400 - p.Y)) / (p1.Y - p2.Y);\r\n            p.Y = 400;\r\n        } else if ((code & TOP) != 0) {\r\n            p.X += ((p1.X - p2.X) * (200 - p.Y)) / (p1.Y - p2.Y);\r\n            p.Y = 200;\r\n        }\r\n\r\n        if (code == code1) {\r\n            p1 = p;\r\n            code1 = getCode(p1.X, p1.Y);\r\n        } else {\r\n            p2 = p;\r\n            code2 = getCode(p2.X, p2.Y);\r\n        }\r\n    }\r\n\r\n    arr.push([\r\n        [p1.X, p1.Y],\r\n        [p2.X, p2.Y],\r\n    ]);\r\n    return arr;\r\n};\r\n\r\nexport default sazerland;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import brezencheim from \"./modules/brezencheim\";\r\nimport differ from \"./modules/diff\";\r\nimport circle from \"./modules/circle\";\r\nimport bezie from \"./modules/bezie\";\r\nimport midpoint from \"./modules/midpoint\";\r\nimport sazerland from \"./modules/sazerland\";\r\nimport notint from \"./modules/notInt\";\r\nimport cirus from \"./modules/cirus\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const canvas = document.querySelector(\"canvas\");\r\n    const clearButton = document.querySelector(\"#clearButton\");\r\n    const dotcount = document.querySelector(\"#dotcount\");\r\n    const bezieSize = document.querySelector(\"#bezie-size\");\r\n    const demPoints = document.querySelector(\"#dem-points\");\r\n    const radios = document.querySelectorAll(\"[type=radio]\");\r\n\r\n    // Точки начала и конца (для алгоритма с нецелыми координытами)\r\n    const start1 = document.querySelector(\"#start-1\");\r\n    const start2 = document.querySelector(\"#start-2\");\r\n    const end1 = document.querySelector(\"#end-1\");\r\n    const end2 = document.querySelector(\"#end-2\");\r\n    const notIntButton = document.querySelector(\"#not-let-button\");\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"black\";\r\n    let callstack = []; // тут будет хранится старые точки\r\n    let checkedID = \"brezenheim\";\r\n\r\n    const clearCanvas = () => {\r\n        canvas\r\n            .getContext(\"2d\")\r\n            .clearRect(0, 0, canvas.getBoundingClientRect().width, canvas.getBoundingClientRect().height);\r\n        if (checkedID === \"sazerland\" || checkedID === \"midpoint\") {\r\n            drawRectangle();\r\n        }\r\n    };\r\n\r\n    clearButton.addEventListener(\"click\", clearCanvas);\r\n    radios.forEach((item) =>\r\n        item.addEventListener(\"change\", () => {\r\n            if (item.checked) {\r\n                if (item.getAttribute(\"id\") !== checkedID) {\r\n                    callstack = [];\r\n                    checkedID = item.getAttribute(\"id\");\r\n                    clearCanvas();\r\n                    if (item.getAttribute(\"type-cut\")) {\r\n                        drawRectangle();\r\n                    }\r\n                }\r\n            }\r\n            console.log(checkedID);\r\n            if (checkedID === \"bezie\") {\r\n                bezieSize.classList.remove(\"d-none\");\r\n                demPoints.classList.add(\"d-none\");\r\n            } else if (checkedID === \"not-let\") {\r\n                demPoints.classList.remove(\"d-none\");\r\n                bezieSize.classList.add(\"d-none\");\r\n            } else {\r\n                bezieSize.classList.add(\"d-none\");\r\n                demPoints.classList.add(\"d-none\");\r\n            }\r\n        })\r\n    );\r\n\r\n    const getCoord = (e) => {\r\n        let x, y;\r\n        if (e.pageX || e.pageY) {\r\n            x = e.pageX;\r\n            y = e.pageY;\r\n        } else {\r\n            x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n            y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n        }\r\n        x -= canvas.offsetLeft;\r\n        y -= canvas.offsetTop;\r\n        return [x, y];\r\n    };\r\n\r\n    canvas.addEventListener(\"mousemove\", (e) => {\r\n        let [x, y] = getCoord(e);\r\n        document.querySelector(\".coordinates\").innerHTML = `X: ${x}; Y: ${y}`;\r\n    });\r\n\r\n    const drawRectangle = () => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, 200);\r\n        ctx.lineTo(1000, 200);\r\n        ctx.stroke();\r\n\r\n        ctx.moveTo(0, 400);\r\n        ctx.lineTo(1000, 400);\r\n        ctx.stroke();\r\n\r\n        ctx.moveTo(333, 0);\r\n        ctx.lineTo(333, 600);\r\n        ctx.stroke();\r\n\r\n        ctx.moveTo(666, 0);\r\n        ctx.lineTo(666, 600);\r\n        ctx.stroke();\r\n    };\r\n\r\n    const checkNotIntPoints = (element, size) => {\r\n        const match = (element.value || \"0\").match(/^\\s*\\d+(\\.\\d+)?\\s*$/im);\r\n        const toD = parseFloat(match);\r\n        console.log(\"match \" + match);\r\n        if (!match || toD < 0 || toD > size) {\r\n            element.classList.add(\"border\", \"border-danger\");\r\n            setTimeout(() => {\r\n                element.classList.remove(\"border\", \"border-danger\");\r\n            }, 2000);\r\n        }\r\n        console.log(toD);\r\n        return !!(match && toD >= 0 && toD <= size);\r\n    };\r\n\r\n    const parse = (elem) => {\r\n        return parseFloat(elem.value || 0);\r\n    };\r\n\r\n    notIntButton.addEventListener(\"click\", () => {\r\n        const b1 = checkNotIntPoints(start1, 1000);\r\n        const b2 = checkNotIntPoints(start2, 1000);\r\n        const b3 = checkNotIntPoints(end1, 600);\r\n        const b4 = checkNotIntPoints(end2, 600);\r\n        const isMatch = b1 && b2 && b3 && b4;\r\n        if (!isMatch) {\r\n            alert(\r\n                \"Проверьте на корректность ввод\\nКоординаты точек по X должны лежать от 0 до 1000\\nКоординаты точек Y должны лежать от 0 до 600\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        notint([\r\n            [parse(start1), parse(end1)],\r\n            [parse(start2), parse(end2)],\r\n        ]).forEach(([x, y]) => {\r\n            console.log(x, y);\r\n            ctx.fillRect(x, y, 1, 1);\r\n        });\r\n        callstack = [];\r\n    });\r\n\r\n    canvas.addEventListener(\"click\", (e) => {\r\n        switch (checkedID) {\r\n            case \"brezenheim\":\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    brezencheim(callstack).forEach(([x, y]) => {\r\n                        ctx.fillRect(x, y, 1, 1);\r\n                    });\r\n                    console.log(callstack);\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"differ\":\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    differ(callstack).forEach(([x, y]) => {\r\n                        console.log(x, y);\r\n                        ctx.fillRect(x, y, 1, 1);\r\n                    });\r\n                    console.log(callstack);\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"circle\":\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    circle(callstack).forEach(([x, y]) => {\r\n                        ctx.fillRect(x, y, 1, 1);\r\n                    });\r\n                    console.log(callstack);\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"bezie\":\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length >= +dotcount.value) {\r\n                    bezie(callstack).forEach(([x, y]) => {\r\n                        // console.log(x, y);\r\n                        ctx.fillRect(x, y, 1, 1);\r\n                    });\r\n                    console.log(callstack);\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"sazerland\":\r\n                console.log(\"sazerland!\");\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    const arr = sazerland(callstack);\r\n                    console.log(callstack);\r\n                    console.log(arr);\r\n                    (arr || []).forEach(([[x1, y1], [x2, y2]]) => {\r\n                        ctx.moveTo(x1, y1);\r\n                        ctx.lineTo(x2, y2);\r\n                        ctx.stroke();\r\n                    });\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"cirus\":\r\n                console.log(\"cirus\");\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    console.log(callstack);\r\n                    const arr = cirus(callstack);\r\n                    console.log(arr);\r\n                    if (arr) {\r\n                        const [[x11,y11],[x21,y21]] = arr;\r\n                        console.log(x11,y11,x21,y11);\r\n                        ctx.moveTo(x11, y11);\r\n                        ctx.lineTo(x21, y21);\r\n                        ctx.stroke();\r\n                    }\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            case \"midpoint\":\r\n                callstack.push(getCoord(e));\r\n                // если выбраны 2 точки\r\n                if (callstack.length === 2) {\r\n                    const arr = midpoint(callstack);\r\n                    console.log(arr);\r\n                    arr.forEach(([[x1, y1], [x2, y2]]) => {\r\n                        ctx.moveTo(x1, y1);\r\n                        ctx.lineTo(x2, y2);\r\n                        ctx.stroke();\r\n                    });\r\n                    console.log(callstack);\r\n                    callstack = [];\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n});\r\n"],"sourceRoot":""}